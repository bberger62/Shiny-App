print names[-1][-1]
%d
x=10
names = ['Amir', 'Barry', 'Chales', 'Dao']
names = c:'Amir', 'Barry', 'Chales', 'Dao']
names = 'Amir', 'Barry', 'Chales', 'Dao']
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("~/Desktop/NYCDSA/Week 5/Visualization Lab Redo/Data_Visualization_Lab")
library(tidyverse)
raw.df = readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
#lower cases
names(raw.df) = tolower(names(raw.df))
#rename
raw.df = raw.df %>% rename(cuisine = `cuisine description`,
inspection.date = `inspection date`)
raw.df
# 2. Convert the inspection.date column from character to date format.
raw.df = raw.df %>% mutate(inspection.date = as.Date(inspection.date, '%m/%d/%Y'))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
raw.df = raw.df %>% mutate(month = as.numeric(format(inspection.date, '%m')))
# 4. Impute the missing values for the 'grade' column
raw.df = raw.df %>% mutate(grade=ifelse(score>=0 & score<14,'A',ifelse(score>=14 & score<28,'B','C')))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df$action = gsub("Violations were cited in the following area(s).","violations",raw.df$action, x = action, ignore.case = F, fixed = T)
View(raw.df)
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df$action = gsub("Violations were cited in the following area(s).","violations",raw.df$action, ignore.case = F, fixed = T)
raw.df$action = gsub("Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.","closed",raw.df$action, ignore.case = F, fixed = T)
raw.df$action = gsub("Establishment re-closed by DOHMH","reclosed",raw.df$action, ignore.case = F, fixed = T)
raw.df$action = gsub("No violations were recorded at the time of this inspection.","no violations",raw.df$action, ignore.case = F, fixed = T)
raw.df$action = gsub("Establishment re-opened by DOHMH","reopened",raw.df$action, ignore.case = F, fixed = T)
View(raw.df)
?is.na
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.df = raw.df %>% filter(!is.na(boro) &
!is.na(score) &
score >= 0 &
inspection.date != '1900-01-01')
raw.df %>% select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
raw.df = raw.df %>% select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
inspections = unique(raw.df)
View(inspections)
View(raw.df)
ggplot(data = inspections) +
geom_bar(aes(x=boro, fill=grade),position='dodge')
inspections %>% group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20,count)
topTwentyCuis = inspections %>% group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20,count)
filteredinspections = semi_join(inspections, topTwentyCuis, by="cuisine")
ggplot(data=filteredinspections) +
geom_bar(aes(x=cuisine,fill=grade),position='stack')
ggplot(data=filteredinspections) +
geom_bar(aes(x=cuisine,fill=grade),position='dodge')
inspections %>% group_by(boro) %>%
summarise(closures = sum(action=='closed' | action=='reclosed'),
total = n(),
ratio = closures/total)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month==1, day==1)
jan1 = filter(flights, month==1, day==1)
(dec25 = filter(flights, month==12, day==25))
filter(flights, month==11| month==12)
nov_dec = filter(flights, month %in% c(11,12))
filter(flights, arr_delay <= 120, dep+delay <=120)
filter(flights, arr_delay <= 120, dep_delay <=120)
filter(flights, !(arr_delay<=120 | dep_delay<=120))
filter(flights, !(arr_delay>120 | dep_delay>120))
df = tibble(x=c(1,NA,3))
filter(df, x>1)
filter(df,is.na(x), x>1)
filter(df,is.na(x)| x>1)
filter(flights, arr_delay>= 120)
flights = flights
View(flights)
filter(flights,dest=='IAH' | dest=='HOU' )
filter(flights, carrier=='UA' | carrier=='AA'| carrier=='DL')
filter(flights, month==6 | month==7 | month==8)
filter(flights, arr_delay>=120 & dep_delay==0)
filter(flights, dep_delay>=60 & arr_delay < 30)
filter(flights, is.na(dep_time))
NA ^ 0
NA | TRUE
FALSE & NA
NA * 0
arrange(flights, year, month, day)
(arrange(flights, year, month, day))
arrange(flights, is.na(flights))
select(flights, year:day)
select(flights,-(year:day))
select(flights, starts_with("y"))
select(flights, ends_with("r"))
select(flights, contains('b'))
select(flights, contains('e'))
rename(flights, ye_ar = 'year')
source('~/.active-rstudio-document', echo=TRUE)
select(flights, year, year)
select(flights,  year)
select(flight, one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
select(flights, one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
select(flights, contains("TIME"))
flights_sml = select(flights, year:day, ends_with("delay"), distance, air_time)
mutate(flights_sml, gain = dep_delay - arr_delay,
speed = distance/air_time*60)
select(flights, dep_time, sched_dep_time)
flights$dep_time[1][1]
flights$dep_time[1][[1]]
flights$dep_time[1][2]
flights$dep_time[1]
flights$dep_time[1][[1]]
flights$dep_time[1][1][1]
flights$dep_time[[1]]
summarise(flights, delay=mean(dep_delay, na.rm=TRUE)
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
View(flights)
flights %>% group_by(., year, carrier) %>%
summarise(tot_delay = sum(arr_delay))
flights %>% filter(is.na(flights)) %>%
group_by(., year, carrier) %>%
summarise(tot_delay = sum(arr_delay))
flights %>% filter(is.na(flights)) %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance))
flights %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance))
flights %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance)) %>%
arrange(avg_dist)
arrange(desc(avg_dist)
arrange(desc(avg_dist)
arrange(desc(avg_dist)
arrange(desc(avg_dist)
flights %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance)) %>%
arrange(desc(avg_dist)
flights %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance)) %>%
arrange(desc(avg_dist))
flights %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance)) %>%
arrange(desc(avg_dist))
flights %>%
filter(desrt=='MIA')
flights %>%
filter(dest=='MIA') %>%
group_by(., year, carrier) %>%
summarise(avg_dist = mean(distance)) %>%
arrange(desc(avg_dist))
flights %>% filter(year==2013 & dest=='MIA')
flights %>% filter(year==2013 & dest=='MIA') %>%
summarise(count())
flights %>% filter(year==2013 & dest=='MIA') %>%
summarise(count=n())
library(lubridate)
setwd("~/Desktop/NYCDSA/Week 5/Shiny App/Data")
ag.df = readr::read_csv("./AgPro.csv")
ag.df = readr::read_csv("AgPro.csv")
setwd("~/Desktop/NYCDSA/Week 5/Shiny App/Data")
ag.df = readr::read_csv("./AgPro.csv")
setwd("~/Desktop/NYCDSA/Week 5/Shiny App")
getwd
ag.df = readr::read_csv("./AgPro.csv")
library(tidyverse)
library(readr)
ag.df = readr::read_csv("./AgPro.csv")
setwd("~/Desktop/NYCDSA/Week 5/Shiny App")
ag.df = readr::read_csv("./AgPro.csv")
setwd('/Users/benberger/Desktop/NYCDSA/Week 5/Shiny App')
---
title: "Shiny App analysis"
output: html_document
---
setwd('/Users/benberger/Desktop/NYCDSA/Week 5/Shiny App')
setwd("~/Desktop/NYCDSA/Week 5/Shiny App")
ag.df = readr::read_csv("./AgPro.csv")
setwd('/Users/benberger/Desktop/NYCDSA/Week 5/Shiny App')
ag.df = readr::read_csv("./AgPro.csv")
